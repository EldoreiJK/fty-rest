<#
 #
 # Copyright (C) 2015-2016 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file asset_GET.ecpp
 * \author Alena Chernikava <AlenaChernikava@Eaton.com>
 * \author Michal Hrusecky <MichalHrusecky@Eaton.com>
 * \author Karol Hrdina <KarolHrdina@Eaton.com>
 * \author Michal Vyskocil <MichalVyskocil@Eaton.com>
 * \brief Implementation of GET operation on any asset
 */
 #><%pre>
#include <cxxtools/regex.h>

#include <fty_proto.h>
#include <malamute.h>

#include "shared/data.h"
#include "shared/utils_json.h"
#include "web/src/asset_computed_impl.h"
#include <fty_common_rest_helpers.h>
#include <fty_common_asset_types.h>
#include <fty_common_mlm.h>
#include <fty_common_mlm_utils.h>
#include <fty_common_macros.h>
</%pre>
<%request scope="global">
UserInfo user;
bool database_ready;
</%request>
<%cpp>
    // verify server is ready
    if (!database_ready) {
        log_debug ("Database is not ready yet.");
        http_die ("internal-error", TRANSLATE_ME ("Database is not ready yet, please try again after a while."));
    }

    // check user permissions
    static const std::map <BiosProfile, std::string> PERMISSIONS = {
            {BiosProfile::Dashboard, "R"},
            {BiosProfile::Admin,     "R"}
            };
    CHECK_USER_PERMISSIONS_OR_DIE (PERMISSIONS);

    // checked parameters
    uint32_t checked_id;
    std::string checked_type;

    // ##################################################
    // BLOCK 1
    // Sanity parameter check
    {
        // dirty parameters
        // Arguments parsed from URL: -> request.getArg("agrgumentName")
        // Real parameters  in URL (after '?': -> qparam.param("parameterName")
        std::string id  = request.getArg("id");
        std::string type = request.getArg("type");
        log_debug ("Request parameters - Initial tainted values received:\n\tid = '%s'\n\ttype = '%s'\n",
                id.c_str (), type.c_str ());

        if ( !type.empty() && !persist::type_to_typeid (type) )
            http_die("request-param-bad", "type", TRANSLATE_ME (type.c_str()), TRANSLATE_ME ("one of datacenter/room/row/rack/group/device"));

        checked_type = type;

        http_errors_t errors;
        if (!check_element_identifier ("dev", id, checked_id, errors)) {
            // XXX: we might have device called group.123, which will be passed as
            //      id = '.123', type = 'group'
            //      This is deprecated form of the call, but handle that gracefully
            id = type + id;
            http_errors_t errors;
            if (!check_element_identifier ("dev", id, checked_id, errors)) {
                http_die ("element-not-found", id.c_str ());
            }
        }
    }
    // Sanity check end

    // ##################################################
    // BLOCK 2
    // connect to malamute
    // copy & paste from alert_ack.ecpp
    mlm_client_t *client = mlm_client_new ();
    if (!client) {
        log_fatal ("mlm_client_new() failed.");
        http_die ("internal-error", TRANSLATE_ME ("mlm_client_new() failed."));
    }

    std::string client_name = utils::generate_mlm_client_id("web.asset_get");
    log_debug ("malamute client name = '%s'.", client_name.c_str ());

    int rv = mlm_client_connect (client, MLM_ENDPOINT, 1000, client_name.c_str ());
    if (rv == -1) {
        log_fatal ("mlm_client_connect (endpoint = '%s', timeout = '%d', address = '%s') failed.",
                        MLM_ENDPOINT, 1000, client_name.c_str ());
        mlm_client_destroy (&client);
        http_die ("internal-error", TRANSLATE_ME ("mlm_client_connect() failed."));
    }
    // end connect to malamute
    std::string jsonAsset = getJsonAsset(client,checked_id);
    mlm_client_destroy (&client);
    if (jsonAsset.empty())  {
        http_die ("internal-error", TRANSLATE_ME ("get json asset failed."));
    }

// Prepare the reply
</%cpp>
    <$$ jsonAsset   $>
